from collections import namedtuple
from datetime import datetime
from pathlib import Path
from urllib.parse import urljoin, urlparse
import re
import textwrap
from commando.util import getLoggerWithConsoleHandler
from hyde.plugin import Plugin
from hyde.template import Template
from . import _version

logger = getLoggerWithConsoleHandler(__name__)


class Generator:
    """
    The main generator class.
    
    This mostly holds state, for now.
    """
    
    def __init__(self, site):
        self.site = site
        plugins = Plugin(site)
        plugins.load_all(site)
        self.events = Plugin.get_proxy(site)
        generator_proxy = GeneratorProxy(
            context_for_path=None,
            preprocessor=self.events.begin_text_resource,
            postprocessor=self.events.text_resource_complete,
        )
        self.templates = Template.find_template(site)
        self.templates.configure(self.site, engine=generator_proxy)
        self.events.template_loaded(self.templates)
        self.site.content.load()
        self.templates.env.globals.update(self.site.config.context.data)
        self.events.begin_generation()
        self.events.begin_site()
    
    def generate_node(self, node):
        logger.debug(f"Generating for {node.relative_path}...")
        self.events.begin_node(node)
        # create the folder if it doesn't exist yet
        folder = Path(self.site.config.deploy_root) / node.relative_path
        if not folder.exists():
            folder.mkdir()
        # do we have a index file?
        for resource in node.resources:
            if resource.name == "index.html":
                content = self.generate_resource(resource)
                break
        else:
            entries = list()
            # TODO: create the listing
            # title: node.url
            # ..: urljoin(self.site.config.base_path, node.parent.url)
            if node.meta.get("listable", False):
                # do a directory listing if we're allowed to
                entries += [
                    node.name
                    # node.name, urljoin(
                    #     self.site.config.base_path, node.url
                    # )
                    for node in node.child_nodes
                ]
                entries += [
                    resource.name
                    # resource.name,
                    # urljoin(self.site.config.base_path, resource.url)
                    # # TODO: figure out the correct type
                    for resource in node.resources
                ]
            else:
                entries.append(
                    "Directory listing is disabled."
                )
            entries.append(
                f"Generated by hyde-gemini {_version}."
            )
            content = self.render(*entries)  # TODO
            (folder / "index.gmi").write_text(content)  # TODO
        self.events.node_complete(node)
        return content

    def generate_resource(self, resource):
        if resource.source_file.is_binary:
            # if it's a binary, simple copy and return it
            content = Path(
                resource.source_file.fully_expanded_path
            ).read_bytes()
            (
                Path(self.site.config.deploy_root) / resource.relative_path
            ).write_bytes(content)
            return content
        if not resource.name.endswith(".html"):
            return self.render(
                "Not yet supported, sorry."
            )  # TODO
        logger.debug(f"Generating for {resource.relative_path}...")
        # TODO: setup stuff here
        current_context = self.site.context.copy()
        current_context.update(
            # based on Hyde's generator.context_for_resource
            resource=resource,
            node=resource.node,
            time_now=datetime.now()
        )
        rendered = self.templates.render_resource(resource, current_context)
        # TODO: remove this?
        entries = [
            line
            for line in rendered.splitlines()
        ]
        content = self.render(*entries)
        # rename index.html to index.gmi
        filename = (
            resource.relative_path
            if resource.relative_path != "index.html"
            else "index.gmi"
        )
        (Path(self.site.config.deploy_root) / filename).write_text(content)
        return content


GeneratorProxy = namedtuple(
    "GeneratorProxy",
    ["preprocessor", "postprocessor", "context_for_path"]
)


def generate_all(site):
    # TODO: setup happens here
    generator = Generator(site)
    stack = list()
    stack.append(site.content)
    while stack:
        current = stack.pop()
        generator.generate_node(current)
        for child in current.resources:
            generator.generate_resource(child)
        for child in current.child_nodes:
            stack.append(child)
    generator.events.site_complete()
    generator.events.generation_complete()
